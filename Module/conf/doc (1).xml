<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CWRNN</name>
    </assembly>
    <members>
        <member name="T:CWRNN.Tasks.CWRTRLTask">
            <summary>
            Task that.
            </summary>
        </member>
        <member name="P:CWRNN.Tasks.CWRTRLTask.LEARNING_RATE">
            <summary>
            Computing RTRL partial derivatives at each step and updating weights in the network.
            </summary>
            
        </member>
        <member name="T:CWRNN.Tasks.CWFeedForwardTask">
            <summary>
            Task that calculate outputs.
            </summary>
        </member>
        <member name="F:CWRNN.Tasks.CWFeedForwardTask.m_feedForwardHiddenKernel">
            <summary>
            Output vector is calculated according to the memory and input
            </summary>
        </member>
        <member name="T:CWRNN.Tasks.CWInitLayerTask">
            <summary>
            Task that increments all data items by a constant calculated as node's IncrementBase + task's Increment
            </summary>
        </member>
        <member name="F:CWRNN.Tasks.CWInitLayerTask.m_kernel">
            <summary>
            Initialization of weights with random values.
            </summary>
        </member>
        <member name="T:CWRNN.CWRNNLayer">
            <author>GoodAI</author>
            <meta>kk</meta>
            <status>Working</status>
            <summary>Recurrent network trained by Real-Time Recurrent Learning</summary>
            <description>Simple recurrent network with fully recurrent hidden layer trained by Real-Time Recurrent Learning (RTRL) algorithm. <br />
                         Parameters:
                         <ul>
                            <li>INPUT_UNITS: Read-only number of units in input layer</li>
                            <li>HIDDEN_UNITS: Number of units in hidden layer</li>
                            <li>OUTPUT_UNITS: Read-only number of units in output layer</li>
                         </ul>
                         
                         I/O:
                         <ul>
                            <li>Input: Input vector copied to activation of input layer units and propagated through the network</li>
                            <li>Target: Desired activation of output layer units </li>
                            <li>Output: Activation of output layer units </li>
                         </ul>
                         
                         Signals:
                         <ul>
                            <li>Reset: Resets activation of all network units to zero</li>
                         </ul>
            </description>
        </member>
    </members>
</doc>
